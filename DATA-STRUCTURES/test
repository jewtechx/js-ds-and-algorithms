
class Node {
    constructor(data,left=null,right=null){
        this.data = data
        this.left = left
        this.right = right
    }
}

class BST {
  constructor(){
    this.root = null
  }

    //add a number to the tree
    add(data){
        let node = this.root
        if(node === null){
           this.root = new Node(data)
        }else {
            const searchTree = function(node){
                if(data < node.data){
                    if(node.left === null){
                        node.left = new Node(data)
                        return
                    }else if(node.left !== null){
                        return searchTree(node.left)
                    }
                }else if(data > node.data){
                    if(node.right === null){
                        node.right = new Node(data)
                    }else if(node.right !== null){
                        return searchTree(node.right)
                    }
                }else{
                    return null
                }
            }
            return searchTree(node)
        }
    }

    //find Min
    findMin(){
        let current = this.root
        while(current.left !== null){
            current = current.left
        }
        return current.data
    }
    
    //find max
    findMax(){
        let current = this.root
        while(current.right !== null){
            current = current.right
        }
        return current.data
    }

    //find
    find(data){
        let current = this.root
        while(current.data !== data){
            if(data < current.data){
                current = current.left
            }else if(data > current.data){
                current = current.right
            }
        }
        return current
    }

    //isPresent
    isPresent(data){
        let current = this.root
        while(current){
            if(data === current.data){
                return true
            }

            if(data < current.data){
                current = current.left
            }else{
                current = current.right
            }
        }
        return false
    }

    //remove data
    remove(data){
        const removeNode = function(node , data){
            if(node == null){
                return null
            }

            if(data == node.data){

                //if node has no children
                if(node.left == null && node.right == null){
                    return null
                }
            

            //if node has no left child
            if(node.left == null){
                return node.right
            }

            //if node has no right child
            if(node.right == null){
                return node.left
            }

            //node has two children
            var tempNode = node.right
            while (tempNode.left !== null) {
                tempNode = tempNode.left
            }
            node.data = tempNode.data
            node.right = removeNode(node.right,tempNode.data)
            return node
    }
    else if(data < node.data){
        node.left = removeNode(node.left,data)
        return node
      }else{
        node.right = removeNode(node.right,data)
        return node
      }
    }
    this.root = removeNode(this.root,data)
}

    isBalanced(){
        return (this.findMinHeight() >= this.findMaxHeight() -1)
    }

    findMinHeight(node =  this.root){
        if(node == null){
            return -1
        }

        let left = this.findMinHeight(node.left)
        let right =  this.findMinHeight(node.right)

        if(left < right){
            return left + 1
        }else{
            return right + 1
        }
    }


    findMaxHeight(node = this.root){
        if(node == null){
            return -1
        }

        let left = this.findMaxHeight(node.left)
        let right = this.findMaxHeight(node.right)

        if(left > right){
            return left + 1
        }else{
            return right + 1
        }
    }

    inOrder(){
        if(this.root == null){
            return null
        }else{
            var result = new Array();
            function traverseInOrder(node){
                node.left && traverseInOrder(node.left)
                result.push(node.data)
                node.right && traverseInOrder(node.right)
            }

            traverseInOrder(this.root)
            return result
        }
    }

    preOrder(){
        if(this.root == null){
            return null
        }else{
            var result =  new Array();
            function traverseInOrder(node){
                result.push(node.data)
                node.left && traverseInOrder(node.left)
                node.right && traverseInOrder(node.right)
            }
            traverseInOrder(this.root)
            return result
        }
    }
    
    postOrder(){
        if(this.root == null){
            return null
        }else{
            var result = new Array()
            function traverseInOrder(node){
                node.left && traverseInOrder(node.left)
                node.right && traverseInOrder(node.right)
                result.push(node.data)
            }
            traverseInOrder(this.root)
            return result
        }
    }

    levelOrder(){
        let result = []
        let Q = []

        if(this.root !== null){
            Q.push(this.root)
            while(Q.length > 0){
                let node = Q.shift()
                result.push(node.data)
                if(node.left !== null){
                    Q.push(node.left)
                }
                if(node.right !== null){
                    Q.push(node.right)
                }
            }
            return result
        } else{
            return null
        }
    }
}


const bst = new BST()
bst.add(3)
bst.add(2)
bst.add(6)
bst.add(13)
bst.add(12)
bst.add(35)
bst.add(50)
bst.add(5)
bst.add(17)
bst.add(1)

bst.remove(500)

console.log(bst.findMax())
console.log(bst.findMin())
console.log(bst.find(5))
console.log(bst.isPresent(90))
console.log(bst.findMinHeight(35))
console.log(bst.findMaxHeight(3))
console.log(bst.inOrder())
console.log(bst.preOrder())
console.log(bst.postOrder())
console.log(bst.levelOrder())

    // console.log(bst.root)





    // linked list
    function LinkedList(){
        var length = 0;
        var head = null;
    
        var Node = function(element){
            this.element = element;
            this.next = null;
        }
    
        this.size = function(){
            return length;
        }
    
        this.head = function(){
            return head;
        }
    
        this.add = function(element){
            var node = Node(element);
    
            if(head == null){
                head = node;
            }else{
                var currentNode = head;
    
                while(currentNode.next){
                    currentNode = currentNode.next;
                }
                currentNode.next = node;
            }
            length++;
        }
    
        this.remove = function(element){
            var currentNode = head;
            var previousNode;
            if(currentNode.element === element){
                head = currentNode.next;
            }else{
                while(currentNode.element !== element){
                    previousNode = currentNode;
                    currentNode = currentNode.next;
                }
                previousNode.next = currentNode.next;
            }
            length --;
        }
    
        this.isEmpty = function(){
            return length === 0
        }
    
        this.indexOf = function(element){
            var currentNode = head;
            var index = -1;
    
            while(currentNode){
                index++;
                if(currentNode.element === element){
                    return index;
                }
                currentNode = currentNode.next
            }
            return -1;
        }
    
        this.elementAt = function(index){
            var currentNode = head;
            var count = 0;
            while(count < index){
                count++;
                currentNode = currentNode.next;
            }
            return currentNode.element;
        }
    
        this.addAt = function(index,element){
            var node = new Node(element);
    
            var currentNode = head;
            var previousNode;
            var currentIndex = 0;
    
            if(index > length){
                return false;
            }
    
            if(index === 0){
                node.next = currentNode;
                head = node
            }else{
                while(currentIndex < index){
                    currentIndex++;
                    previousNode = currentNode;
                    currentNode = currentNode.next;
                }
                node.next = currentNode;
                previousNode.next = node;
            }
            length++;
        }
    
        this.removeAt = function(index){
            var currentNode = head;
            var previousNode;
            var currentIndex = 0;
            if(index < 0 || index >= length){
                return null;
            }
            if(index === 0){
                head = currentNode.next;
            }else{
                while(currentIndex < index){
                    currentIndex++;
                    previousNode = currentNode;
                    currentNode = currentNode.next
                }
                previousNode.next = currentNode.next
            }
            length--;
        }
    }
    
    
    var conka = new LinkedList();
    conka.add("Murphy")
    conka.add("Clarke")
    conka.add("Dick")
    conka.add("Raven")
    
    console.log(conka.size())
    console.log(conka.removeAt(3))
    console.log(conka.indexOf("Murphy"))
    console.log(conka.elementAt(3))